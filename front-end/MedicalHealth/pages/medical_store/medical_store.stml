<template>
	<safe-area class="view_1">
		<hoc-nav-bar-sgm title="我的药库"></hoc-nav-bar-sgm>
		<view v-if="tel">
			<view v-show="identity==1">
				<view class="a-tabs">
					<view v-for="(item, index) in TabList" class="a-tab-item" @click="tabClick(item, index)">
						<text
							:class="`a-tab-item-text  ${current === index ? 'a-tab-item-text-active' : ''}`">{item.name}</text>
						<text class="a-tab-item-line" v-if="current === index"></text>
					</view>
				</view>
			</view>
			<view class="containere" style="height:auto">
				<picker name="date-picker" class="date-picker_contaner" mode="multiSelector" :range="dateList"
					:value={{dateMltiSelectorValue}} onchange={this.dateMultiSelectorChange}
					oncolumnchange={this.dateMultiSelectorColumnChange}>
					<text class="date-picker_label">{label}:{datenow}</text>
				</picker>
			</view>
			<scroll-view class="view_2" scroll-y="true" style="height :auto">
				<view v-for="(item,index) in dataList" :key="item.id">
					<view v-if="dataList.length != 0">
						<div class="list">
							<view class="list" ontouchstart="touchStart(event)" ontouchmove="touchMove(event)"
								ontouchend="touchEnd(event)" :id="item.id"
								:style="currentid==item.id?handleSwipe:'transform:translateX(0px)'">
								<image class="image" src={{item.img}} mode="topleft" />
								<view class="information">
									<text v-if="datenow<=item.duedate" class="nameblack">
										{{item.name}}
									</text>
									<text v-if="datenow>item.duedate" class="namered">
										{{item.name}}(已过期）
									</text>
									<text class="date">
										{{item.manufacturedate }}
									</text>
									<text class="date">
										{{item.duedate }}
									</text>
								</view>
								<view class="detail" :id2="index">
									<button onclick="myopen(event)" :id2="index">详细信息</button>
								</view>
							</view>
							<div class="delete" @click="deleteItem(index,item.id)"
								:style="currentid==item.id?handleSwipe:'transform:translateX(0px)'">
								<text class="deleteword">删除</text>
							</div>
						</div>
					</view>
				</view>
				<view v-if="dataList.length === 0">
					<text class="typebox">这一天您没有过期的药物哦</text>
				</view>
			</scroll-view>
		</view>
	</safe-area>
</template>
<script>
import "../../components/feature-component/hoc-nav-bar-sgm.stml";
import "../../script/api.js";
import "../../components/avm-ui/button";
var vm = null;
apiready = function () {
	api.setFrameAttr({
		name: 'personal',
		hidden: true
	});
	var header = $api.dom('header');
	var footer = $api.dom('footer');
	var headerH = $api.fixStatusBar(header);
	var footerH = $api.fixTabBar(footer);
	api.setStatusBarStyle({
		style: 'dark'
	});
};
api.addEventListener({
	name: 'tabframe'
}, function (ret, err) {
	if (ret.name == api.frameName) {
		api.setFrameAttr({
			name: 'personal',
			hidden: true
		});
		var a = api.getPrefs({
			sync: true,
			key: 'id'
		});
		if (a == '') {
			api.alert({ msg: '您还未登录，请先登录' })
		}
		else {
			vm.reinitData(a);
		}
	}
});
export default {
	name: 'page',
	data() {
		return {
			usrid: '',
			identity: '',
			tel: '',
			bindtel: '',
			year: [],
			month: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
			day: [],
			yearNow: new Date().getFullYear(),
			dateMltiSelectorValue: [10, 0, 0],
			selectYear: new Date().getFullYear(),
			selectMoth: new Date().getMonth() + 1,
			selectDay: new Date().getDate(),
			dateList: [],
			label: "日期",
			datenow: '',
			TabList: [{
				name: "全部"
			}, {
				name: "我的"
			}, {
				name: "家人"
			}],
			current: 0,
			totaldataList: [],
			dataList: [],
			startX: 0,//触摸位置
			endX: 0,//结束位置
			moveX: 0,  //滑动时的位置
			disX: 0, //移动距离
			handleSwipe: 'transform:translateX(0px)',//滑动时的效果,动态绑定
			delBtnWidth: 55, //删除按钮宽度单位（px）
			currentid: '',
		};
	},
	installed() {
		vm = this;
		this.telinit();
	},
	methods: {
		//判断是否已传递参数
		telinit() {
			var a = api.getPrefs({
				sync: true,
				key: 'id'
			});
			if (a == '') {
				api.alert({ msg: '您还未登录，请先登录' })
			}
			else {
				this.usrid = a;
			}
		},
		//获取年份数组
		getYears() {
			this.year = []; //一个页面多次使用的情况 必须先清空 否则会出现各种问题
			for (i = 10; i > 0; i--) {
				this.year.push(this.yearNow + i);
			}
			for (i = 0; i < 10; i++) {
				this.year.push(this.yearNow - i);
			}
		},
		//初始化数据
		initTime() {
			//初始化设定当前时间
			this.day = [];
			let daypro = [];
			var days = new Date(this.selectYear, this.selectMoth, 0).getDate();
			this.datenow = [this.selectYear, this.selectMoth, this.selectDay].map(this.formatNumber).join('-');
			for (i = 1; i <= days; i++) {
				daypro.push(i);
			}
			this.day = daypro;
			this.dateMltiSelectorValue = [0, this.selectMoth - 1, this.selectDay - 1];
			this.dateList = [this.year, this.month, this.day];
		},
		//格式化日期展示
		formatNumber(n) {
			n = n.toString(); //根据年月获取天数
			return n[1] ? n : '0' + n;
		},
		initData() {  //异步请求
			this.totaldataList = [];
			this.current = 0;
			//根据用户id获取用户信息
			const requestusr = (url, params, method) => {
				return new Promise((resolve, reject) => {
					api.ajax({
						url: 'http://124.222.44.207:5000/userLibrary/users/' + this.usrid,
						method: 'get',
					}, function (ret, err) {
						if (ret) {
							resolve(ret)
						} else {
							reject('错误码：' + err.code + '；错误信息：' + err.msg + '网络状态码：' + err.statusCode)
						};
					});
				})
			};
			requestusr().then(res => {
				if (res.data) {
					this.identity = res.data.identity == 'client' ? 2 : 1;
					this.tel = res.data.telephone;
					if (this.identity == 1 && res.data.bindTelephone != '') {
						this.bindtel = res.data.bindTelephone;
					}
				} else {
					api.alert({
						title: '首页请求用户数据提示',
						msg: res.reject
					});
				}
			})
			//获取该用户的药库
			const requestmedi1 = (url, params, method) => {
				return new Promise((resolve, reject) => {
					api.ajax({
						url: 'http://124.222.44.207:5000/drugLibrary/getByTelephone/' + this.tel,
						method: 'get',
					}, function (ret, err) {
						if (ret) {
							resolve(ret)
						} else {
							reject('错误码：' + err.code + '；错误信息：' + err.msg + '网络状态码：' + err.statusCode)
						};
					});
				})
			};
			requestmedi1().then(res => {
				if (res.data) {
					this.totaldataList = res.data;
					this.totaldataList.sort(this.dateorder);
					//初始化设定当前药库列表展示（默认全部）
					this.dataList = this.totaldataList;
					if (this.identity == 1 && this.bindtel == '') {
						this.setalert();
					}
				} else {
					api.alert({
						title: '首页请求数据提示',
						msg: res.reject
					});
				}
			})
			//根据绑定手机号获取绑定用户的药库
			if (this.identity == 1 && this.bindtel != '') {
				const requestmedi2 = (url, params, method) => {
					return new Promise((resolve, reject) => {
						api.ajax({
							url: 'http://124.222.44.207:5000/drugLibrary/getByTelephone/' + this.bindtel,
							method: 'get',
						}, function (ret, err) {
							if (ret) {
								resolve(ret)
							} else {
								reject('错误码：' + err.code + '；错误信息：' + err.msg + '网络状态码：' + err.statusCode)
							};
						});
					})
				};
				requestmedi2().then(res => {
					if (res.data) {
						this.totaldataList = this.totaldataList.concat(res.data);
						this.totaldataList.sort(this.dateorder);
						//初始化设定当前药库列表展示（默认全部）
						this.dataList = this.totaldataList;
						this.setalert();
					} else {
						api.alert({
							title: '首页请求数据提示',
							msg: res.reject
						});
					}
				})
			}
		},
		reinitData(a) {
			this.usrid = a;
			this.getYears();
			this.initTime();
			this.initData();
		},
		//排序顺序：按过期日期自前
		dateorder(a, b) {
			let obj1 = a.duedate;
			let obj2 = b.duedate;
			const val1 = Math.floor(new Date(obj1).getTime() / 1000);
			const val2 = Math.floor(new Date(obj2).getTime() / 1000);
			return val1 - val2
		},
		//药物过期提醒
		setalert() {
			var len = this.totaldataList.length;
			let i = 0;
			for (; i < len; i++) {
				if (this.totaldataList[i].duedate < this.datenow) {
					var contentidentity = this.totaldataList[i].owner == 1 ? '您的药物【' : '您家人的药物【'
					api.notification({
						notify: {
							title: '药物过期通知！',
							content: contentidentity + this.totaldataList[i].name + '】已过期，请及时清理！'
						}
					});
				}
			}
		},
		//根据年月获取天数
		setDays() {
			this.day = [];
			let daypro = [];
			var days = new Date(this.selectYear, this.selectMoth, 0).getDate();
			for (i = 1; i <= days; i++) {
				daypro.push(i);
			}
			this.day = daypro; //处理安卓数组索引超界问题
			if (this.dateMltiSelectorValue[2] >= this.day.length) {
				this.dateMltiSelectorValue[2] = this.day.length - 1;
			}
			this.dateList = [this.year, this.month, this.day];
		},
		//选择时间后更改展示时间及列表
		dateMultiSelectorChange(e) {
			if (e.detail.value.length == 2) {
				this.dateMltiSelectorValue = [e.detail.value[0], e.detail.value[1], this.dateMltiSelectorValue[2]];
			} else {
				this.dateMltiSelectorValue = [e.detail.value[0], e.detail.value[1], e.detail.value[2]];
			}
			var year = this.year[this.dateMltiSelectorValue[0]];
			var month = this.month[this.dateMltiSelectorValue[1]] > 9 ? this.month[this.dateMltiSelectorValue[1]] : '0' + this.month[this.dateMltiSelectorValue[1]];
			var day = this.day[this.dateMltiSelectorValue[2]] > 9 ? this.day[this.dateMltiSelectorValue[2]] : '0' + this.day[this.dateMltiSelectorValue[2]];
			this.datenow = year + '-' + month + '-' + day;
		},
		//picker组件更改选定年、月后每列内容更改
		dateMultiSelectorColumnChange(e) {
			var column = e.detail.column;
			if (column == this.dateList.length - 1) {
				return;
			}
			if (column == 0) {
				this.selectYear = this.year[e.detail.value];
				this.dateMltiSelectorValue[0] = e.detail.value;
				this.setDays();
			} else if (column == 1) {
				this.selectMoth = this.month[e.detail.value];
				this.dateMltiSelectorValue[1] = e.detail.value;
				this.setDays();
			}
		},
		//tab更改展示范围（全部、自己、家人）后更改展示列表
		tabClick(item, index) {
			this.current = index;
			this.dataList = [];
			let arraypro1 = []; //自己
			let arraypro2 = [];//家人
			if (index == 0) {
				this.dataList = this.totaldataList;
			} else {
				for (let i = 0; i < this.totaldataList.length; i++) {
					//自己
					if (this.totaldataList[i].telephone == this.tel) {
						arraypro1.push(this.totaldataList[i]);
					}
					if (this.totaldataList[i].telephone == this.bindtel) {
						arraypro2.push(this.totaldataList[i]);
					}
				}
				if (index == 1) {
					this.dataList = arraypro1;
				}
				else {
					this.dataList = arraypro2;
				}
			}
			this.resumetouch();
		},
		touchStart(event) {
			// 记录初始位置
			this.startX = event.detail.x;
			var id = event.currentTarget.getAttribute('id');
			if (this.currentid != '' && id != this.currentid) {
				this.resumetouch();
			}
			this.currentid = id;
		},
		touchMove(event) {
			this.currentid = event.currentTarget.getAttribute('id');
			this.moveX = event.detail.x;
			this.disX = this.startX - this.moveX;
			// 如果是向右滑动或者不滑动，不改变滑块的位置
			if (this.disX < 0 || this.disX == 0) {
				this.handleSwipe = "transform:translateX(0px)";
				// 大于0，表示左滑了，此时滑块开始滑动
			} else if (this.disX > 0 && this.handleSwipe != "transform:translateX(-" + this.delBtnWidth + "px)") {
				//随具体滑动距离移动
				this.handleSwipe = "transform:translateX(-" + this.disX + "px)";
				// 最大也只能等于按钮宽度
				if (this.disX >= this.delBtnWidth) {
					this.handleSwipe = "transform:translateX(-" + this.delBtnWidth + "px)";
				}
			}
		},
		// 滑动结束
		touchEnd(event) {
			//let index = event.currentTarget.id;  // 记录当前滑动的滑块的index
			this.currentid = event.currentTarget.getAttribute('id');
			this.endX = event.detail.x;
			this.disX = this.startX - this.endX;
			//最大距离只能等于按钮宽度
			if (this.disX > this.delBtnWidth) {
				this.handleSwipe = "transform:translateX(-" + this.delBtnWidth + "px)";
			}

		},
		resumetouch() {
			this.handleSwipe = "transform:translateX(0px)";
		},
		// 删除
		deleteItem(index, id) {
			// 复位
			this.resumetouch();
			// 删除
			var index1 = this.totaldataList.findIndex(item => {
				if (id == item.id) {
					return true
				}
			});
			const request = (url, params, method) => {
				return new Promise((resolve, reject) => {
					api.ajax({
						url: 'http://124.222.44.207:5000/drugLibrary/drugs/' + id,
						method: 'delete',
					}, function (ret, err) {
						if (ret) {
							resolve(ret)
						} else {
							reject('错误码：' + err.code + '；错误信息：' + err.msg + '网络状态码：' + err.statusCode)
						};
					});
				})
			};
			request().then(res => {
				if (res) {
					this.totaldataList.splice(index1, 1);
					//重新展示
					this.dataList = [];
					let arraypro = [];
					if (this.current == 0) {
						this.dataList = this.totaldataList;
					} else {
						//自己/亲人
						for (let i = 0; i < this.totaldataList.length; i++) {
							if (this.totaldataList[i].owner == this.current) {
								arraypro.push(this.totaldataList[i]);
							}
						}
						this.dataList = arraypro;
					}
					this.resumetouch();
					api.alert({ msg: '药物删除成功' });
				} else {
					api.alert({
						title: '首页请求数据提示',
						msg: res.reject
					});
				}
			})
		},
		myopen(e) {
			var index1 = this.totaldataList.findIndex(item => {
				if (e.currentTarget.getAttribute('id2') == item.id) {
					return true
				}
			});
			api.openWin({
				name: "informationdetail",
				url: "./detail.stml",
				reload: true,
				bounces: true,
				pageParam: {
					data: this.dataList[e.currentTarget.getAttribute('id2')].id,
				}
			});
		}
	}
};
</script>
<style>
.view_1 {
	width: 100%;
	text-align: center;
	font-size: 10px;
	height: 100%;
}
.a-tabs {
	width: 100%;
	justify-content: space-between;
	align-items: center;
	height: 44px;
	display: flex;
	flex-direction: row;
	flex-wrap: nowrap;
	flex-shrink: 0;
	background: #fff;
	overflow: auto;
}
.a-tab-item {
	flex: 1;
	height: 100%;
	padding: 0 12px;
	justify-content: center;
	align-items: center;
}
.a-tab-item-text {
	color: #666;
	font-size: 14px;
	font-weight: normal;
	white-space: nowrap;
	text-overflow: ellipsis;
}
.a-tab-item-text-active {
	color: #333;
	font-weight: bold;
}
.a-tab-item-line {
	position: absolute;
	bottom: 0;
	background: #f1c694;
	width: 20px;
	height: 2px;
}
.containere {
	width: 100%;
	background-color: #ffffff;
	text-align: left;
	display: flex;
	flex-direction: column;
	box-sizing: border-box;
	font-size: 35rpx;
	color: #f887d6;
	position: relative;
}
.date-picker_contaner {
	background-color: #cccccc;
	height: 35px;
}
.date-picker_label {
	font-size: 18px;
}
.view_2 {
	width: 100%;
	border-radius: 10rpx;
	display: flex;
	flex-direction: column;
	box-sizing: border-box;
	font-size: 35rpx;
	padding: 10rpx 0 10rpx 0;
	position: relative;
}
.list {
	display: flex;
	width: 100%;
	transition: 0.6s;
	flex-direction: row;
	border-radius: 5rpx;
	border-style: double;
	border-color: #f0f0f0;
	border-width: 1px;
	position: relative;
}
.image {
	width: 60px;
	height: 60rpx;
}
.information {
	text-align: left;
	flex-direction: column;
	color: darkred;
}
.nameblack {
	width: 150px;
	font-size: 17rpx;
	word-break: break-all;
	color: black;
	margin-left: 30px;
}
.namered {
	width: 150px;
	font-size: 17rpx;
	word-break: break-all;
	color: red;
	margin-left: 30px;
}
.date {
	font-size: 13rpx;
	word-break: break-all;
	color: grey;
	margin-left: 30px;
}
.detail {
	width: 100px;
	height: 100%;
	margin-top: 15px;
}
.delete {
	background: #ff4949;
	font-size: 17px;
	color: #fff;
	text-align: center;
	position: absolute;
	display: flex;
	top: 0;
	right: -55px;
	height: 100%;
	transition: 0s;
	width: 53px;
}
.deleteword {
	margin: auto;
}
</style>